import cv2
import numpy as np
import serial
ser = serial.Serial('/dev/ttyACM0', 9600, timeout=1)   # Thường là ACM0
ser.reset_input_buffer()

shapes = {3: "triangle", 4: "rectangle", 5: "pentagon"}
focus_box_color = (0, 255, 0)
focus_box_thickness = 2
detected_shapes = []

cap = cv2.VideoCapture(0)
min_area_threshold = 500

while True:
    ret, frame = cap.read()
    if not ret:
        break

    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    blurred = cv2.GaussianBlur(gray, (5, 5), 0)
    edges = cv2.Canny(blurred, 50, 150, apertureSize=3)
    kernel = np.ones((3, 3), np.uint8)
    morph = cv2.erode(cv2.dilate(edges, kernel, 1), kernel, 1)

    contours, _ = cv2.findContours(morph, cv2.RETR_EXTERNAL,
                                   cv2.CHAIN_APPROX_SIMPLE)

    max_contour, max_area = None, 0
    for c in contours:
        area = cv2.contourArea(c)
        approx = cv2.approxPolyDP(c, 0.02 * cv2.arcLength(c, True), True)
        if area > max_area and area > min_area_threshold and len(approx) in shapes:
            max_area, max_contour = area, c

    if max_contour is not None:
        x, y, w, h = cv2.boundingRect(max_contour)
        cv2.rectangle(frame, (x, y), (x + w, y + h),
                      focus_box_color, focus_box_thickness)
        approx = cv2.approxPolyDP(max_contour, 0.02 *
                                  cv2.arcLength(max_contour, True), True)
        shape = shapes[len(approx)]
        print(shape)
        detected_shapes.append(shape)

    if len(detected_shapes) == 10:
        most_common = max(set(detected_shapes), key=detected_shapes.count)
        print("Most common shape:", most_common)
        ser.write((most_common + "\n").encode())
        detected_shapes.clear()

    cv2.imshow("frame", frame)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
ser.close()
